{"version":3,"sources":["logo.svg","Modal.js","Table.js","services.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","makeStyles","theme","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","useStyles","table","maxWidth","SimpleTableCell","props","nodeRef","React","useRef","useState","type","nodeType","setNodeType","useEffect","current","select","document","execCommand","value","TableCell","align","className","ref","onClick","SimpleTable","classes","tableData","heading","rows","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","map","head","TableBody","row","key","address","name","private_key","public_key","seed","baseURL","process","ENDPOINT","requestGeneratedKeys","a","axios","get","headers","response","data","App","stepState","setStepState","password","fileState","tableDataState","setTableDataState","handleGenerateKeys","td","eth","waves","currentStep","Button","variant","color","href","download","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0da53d3b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nexport default function TransitionsModal() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <button type=\"button\" onClick={handleOpen}>\n        react-transition-group\n      </button>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open}>\n          <div className={classes.paper}>\n            <h2 id=\"transition-modal-title\">Transition modal</h2>\n            <p id=\"transition-modal-description\">\n              react-transition-group animates me.\n            </p>\n          </div>\n        </Fade>\n      </Modal>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\n\nconst useStyles = makeStyles({\n  table: {\n    maxWidth: 300,\n  },\n});\n\nfunction SimpleTableCell(props) {\n  const nodeRef = React.useRef();\n  const [nodeType, setNodeType] = React.useState(props.type);\n\n  React.useEffect(() => {\n    if (nodeType === \"\" && nodeType !== props.type) {\n      nodeRef.current.select();\n      document.execCommand(\"copy\");\n      setNodeType(props.type);\n    }\n  });\n\n  if (!props.value) return <div></div>;\n\n  const handleCopy = () => {\n    setNodeType(\"\");\n  };\n\n  return (\n    <TableCell align=\"right\">\n      <div className=\"inner\">\n        <input ref={nodeRef} type={nodeType} value={props.value} />\n        <div>\n          <FileCopyIcon onClick={handleCopy} />\n        </div>\n      </div>\n    </TableCell>\n  );\n}\n\nexport default function SimpleTable(props) {\n  const classes = useStyles();\n\n  const { heading = [], rows } = props.tableData;\n\n  const mapHeading = (head) => {\n    return <TableCell>{head}</TableCell>;\n  };\n\n  return (\n    <TableContainer component={Paper} className=\"table-base\">\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>{heading.map(mapHeading)}</TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow key={row.address}>\n              <SimpleTableCell value={row.name} />\n              <SimpleTableCell value={row.address} />\n              <SimpleTableCell value={row.private_key} type=\"password\" />\n              <SimpleTableCell value={row.public_key} />\n              <SimpleTableCell value={row.seed} type=\"password\" />\n              {/* <TableCell component=\"th\" scope=\"row\">\n                <div className=\"inner\">{row.address}</div>\n              </TableCell>\n              <TableCell align=\"right\">\n                <div className=\"inner\">{row.private_key}</div>\n                <FileCopyIcon />\n              </TableCell>\n              <TableCell align=\"right\">\n                <div className=\"inner\">{row.public_key}</div>\n              </TableCell>\n              <TableCell align=\"right\">\n                <div className=\"inner\">{row.seed}</div>\n              </TableCell> */}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import axios from \"axios\";\n\nexport const baseURL = process.env.ENDPOINT || \"http://localhost:8091\";\n\n// export interface Root {\n//     waves: Waves;\n//     eth: Eth;\n//   }\n//   export interface Waves {\n//     address: string;\n//     private_key: string;\n//     public_key: string;\n//     seed: string;\n//   }\n//   export interface Eth {\n//     address: string;\n//     private_key: string;\n//     public_key: string;\n//   }\n\nexport async function requestGeneratedKeys() {\n  const response = await axios.get(\"/generate-keys\", {\n    baseURL: baseURL,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  return response.data; // Root\n}\n\nexport async function requestKeyGeneration(pass) {\n  const response = await axios.post(\n    \"/handle-pass\",\n    {\n      password: pass,\n    },\n    {\n      baseURL: baseURL,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n\n  const contentType = response.headers[\"Content-Type\"];\n  const filename = response.headers[\"Filename\"];\n\n  return { contentType, filename, data: response.data };\n}\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { TransitionsModal } from './Modal'\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport SimpleTable from './Table'\n\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport { requestKeyGeneration, requestGeneratedKeys } from './services'\n\nfunction App() {\n  const [stepState, setStepState] = useState(0);\n  const [formState, setFormState] = useState({ password: \"\" });\n  const [fileState, setFileState] = useState({});\n  const [tableDataState, setTableDataState] = useState({})\n\n  const handlePassword = (event) => {\n    setFormState({\n      password: event.target.value,\n    });\n  };\n\n  // const handleGenerateKey = async () => {\n  //   const { data, contentType, filename } = await requestKeyGeneration(formState.password);\n\n  //   const file = new Blob([data], { type: contentType });\n\n  //   setFileState({ href: URL.createObjectURL(file), download: filename });\n\n  //   // setStepState(stepState === 0 ? 1 : 0);\n  //   if (stepState === 0) {\n  //     setStepState(2);\n  //   }\n  //   if (stepState === 1) {\n  //     setStepState(2)\n  //   }\n  // };\n\n  const handleGenerateKeys = async () => {\n    const data = await requestGeneratedKeys()\n\n    // \"address\": \"3P8ezH84H2VXevmwqvu18fWsnkpdBkmH6JY\",\n    //     \"private_key\": \"7WapAHBYYNH7npsRxzkWz2vLa64DBAaZHr6tQjtL8hjY\",\n    //     \"public_key\": \"99V2Wq2yDCoxr9VorwuEFaEEj5FGxpacixFHTeDACh3u\",\n    //     \"seed\":\n    const td = {\n      heading: ['', 'Address', 'Private Key', 'Public Key', 'Seed'],\n      rows: [\n        { ...data.eth, name: 'ETH'},\n        { ...data.waves, name: 'WAVES'},\n      ]\n    }\n\n    setTableDataState(td)\n    setStepState(2);\n  }\n\n  const stepsMap = {\n    [0]: (\n      <>\n        {/* <TextField\n          id=\"standard-uncontrolled\"\n          label=\"Enter password\"\n          margin=\"normal\"\n          value={formState.password}\n          onChange={handlePassword}\n        /> */}\n        <Button variant=\"contained\" color=\"primary\" onClick={handleGenerateKeys}>\n          Generate Keys\n        </Button>\n      </>\n    ),\n    [1]: (\n      <>\n        <a href={fileState.href} download={'privkey'}>\n          <Button variant=\"contained\" color=\"primary\">\n            Download Pair\n          </Button>\n        </a>\n      </>\n    ),\n    [2]: (\n      <>\n        <SimpleTable tableData={tableDataState}/>\n      </>\n    )\n  };\n\n  const currentStep = stepsMap[stepState];\n\n  return (\n    <div className=\"App\">\n      <link\n        rel=\"stylesheet\"\n        href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\"\n      />\n      <link\n        rel=\"stylesheet\"\n        href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n      />\n      <header className=\"App-header\">\n        <h1 className='main-h'>Gravity Node Keys Generator</h1>\n        <div className=\"vertical-flex\">{currentStep}</div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}